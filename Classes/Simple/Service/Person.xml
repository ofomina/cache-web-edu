<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Simple.Service.Person">
<Abstract>1</Abstract>
<TimeCreated>64120,67933.889603</TimeCreated>

<Method name="GetPersons">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    set quant = $RANDOM(10)+"1"
    set array = ##class(%ListOfObjects).%New()
    
    for i = 1:1:quant{
        set json = ##class(%ZEN.proxyObject).%New()
            set json.Name = ##class(%PopulateUtils).Name()
            set json.Age = ##class(%PopulateUtils).Integer("1","100")
            set json.City = ##class(%PopulateUtils).City()
            set json.Address = ##class(%PopulateUtils).Street()
            set json.Status = ##class(%PopulateUtils).ValueList(",0,1")
            //"Name": ##class(%PopulateUtils).Name(),
            //"Age": ##class(%PopulateUtils).Integer("1","100"),
            //"City": ##class(%PopulateUtils).City(),
            //"Address": ##class(%PopulateUtils).Street(),
            //"Status":##class(%PopulateUtils).ValueList(",0,1")
    
    do array.Insert(json)
     
    }
    set proxy.list = array
    
    do proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="Delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    tstart
    try{
        do ##class(Simple.Logic.Person).Delete(id)
        tcommit
    }catch ex{
        set status = ex.AsStatus()
        trollback 
    }
    
    return status
]]></Implementation>
</Method>

<Method name="Get">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set json = ##class(Simple.Logic.Person).Get(id)
        do json.%ToJSON()
    }catch ex{
        set st = ex.AsStatus() 
    }
    
    return st
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
        
    TSTART
    try
    {
        set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(),"I","UTF8"),,.data,1)
        if $$$ISERR(st) $$$ThrowStatus(st)
        
        do ##class(Simple.Logic.Person).Save(data)
        TCOMMIT
    } 
    catch ex
    {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    return st
]]></Implementation>
</Method>
</Class>
</Export>
